import { OpenAI } from "openai";
import cars from "../assets/content.js";
import { createClient } from "@supabase/supabase-js";
import createOutput from "./deepseekCall.js";
import getWebsiteByMake from "./getLogo.js";

const supabase = createClient(
  import.meta.env.VITE_SUPABASE_URL,
  import.meta.env.VITE_SUPABASE_API_KEY
);

const client = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true, // do not host with this line of code
});

async function generateAndStoreEmbeddings() {
  const data = await Promise.all(
    cars
      .filter(
        (car) =>
          typeof car.description === "string" && car.description.trim() !== ""
      )
      .map(async (car) => {
        const input =
          car.description +
          "Car specs: " +
          car.year +
          ", " +
          car.transmission +
          ", " +
          car.fuel_type +
          ", " +
          car.engine_size +
          ", " +
          car.body_style +
          ", " +
          car.drive_type;
        const response = await client.embeddings.create({
          model: "text-embedding-ada-002",
          input: input,
        });

        return {
          make: car.make,
          model: car.model,
          year: car.year,
          transmission: car.transmission,
          fuel_type: car.fuel_type, // handle both naming styles
          engine_size: car.engine_size,
          body_style: car.body_style,
          drive_type: car.drive_type,
          description: car.description,
          embedding: response.data[0].embedding,
        };
      })
  );

  if (data.length === 0) {
    console.warn("No valid cars to process.");
    return;
  }

  await supabase.from("cars").insert(data);
  console.log("Embedding and storing complete!");
}

// generateAndStoreEmbeddings();

async function carSearch(query) {
  const response = await client.embeddings.create({
    model: "text-embedding-ada-002",
    input: query,
  });

  // The vector generated by OpenAI
  const embedding = response.data[0].embedding;

  // Query Supabase for nearest vector match
  const { data, error } = await supabase.rpc("match_cars", {
    query_embedding: embedding,
    match_threshold: 0.5,
    match_count: 1,
  });

  if (error) {
    console.error("Error in Supabase query:", error);
    return []; // Return an empty array or handle the error as needed
  }

  const result = {
    make: data[0].make,
    model: data[0].model,
    transmission: data[0].transmission,
    engine_size: data[0].engine_size,
    body_style: data[0].body_style,
    fuel_type: data[0].fuel_type,
    description: data[0].description,
  };

  console.log(result);
  const image = getWebsiteByMake(result.make);
  const output = await createOutput(JSON.stringify(result));
  // Return the data so it can be used in the calling function
  return { output, image };
}

// carSearch("I want a 1.2L coupe that is fast but has good grip and comfortable to drive");

export default carSearch;
